// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  urls         Url[]
  blackListUrl BlackListUrl[]
  roles        UsersOnRoles[]
}

model Url {
  id String @id @default(cuid())

  shortCode String @unique
  fullUrl   String

  expiredAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  visits Visit[]
}

model BlackListUrl {
  id     String  @id @default(cuid())
  url    String  @unique
  reason String? @db.Text

  causerId String?
  causer   User?   @relation(fields: [causerId], references: [id])

  createdAt DateTime @default(now())
}

model Visit {
  id        String   @id @default(cuid())
  ip        String?
  createdAt DateTime @default(now())

  url   Url    @relation(fields: [urlId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  urlId String
}

model Role {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  permissions RolesOnPermissons[]
  users       UsersOnRoles[]
}

model Permission {
  id   String @id @default(uuid())
  name String

  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now())
  roles     RolesOnPermissons[]
}

model RolesOnPermissons {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String

  @@id([roleId, permissionId])
}

model UsersOnRoles {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId String

  @@id([userId, roleId])
}
